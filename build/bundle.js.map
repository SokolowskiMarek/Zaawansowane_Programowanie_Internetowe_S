{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;AAAA,kBAAkB,SAAI,IAAI,SAAI;AAC9B;AACA;AACA,6CAA6C,QAAQ;AACrD;AACA;AAC0E;AACzB;AAClC;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,qEAA4B;AAChE;AACA;AACA;AACA;AACA;AACA,IAAI,0DAAQ;AACZ;;;;;;;;;;;;;;;;;;AC/CsD;AACE;AACV;AAC/B;AACf;AACA;AACA;AACA,2BAA2B,iEAAiB;AAC5C;AACA,2BAA2B,+DAAgB;AAC3C;AACA,2BAA2B,uDAAY;AACvC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AChBO;AACP;AACA;AACA;AACA,2BAA2B,mBAAmB,EAAE,sBAAsB,EAAE,gBAAgB,EAAE,sBAAsB;AAChH,SAAS;AACT;AACA;AACA;AACA;;;;;;;;;;;;;;;ACTO;AACP;AACA;AACA;AACA,gCAAgC,eAAe,WAAW,sBAAsB,WAAW,qBAAqB,WAAW,kBAAkB;AAC7I,SAAS;AACT;AACA;AACA;AACA;;;;;;;;;;;;;;;ACTO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;ACZO;AACP;AACA;AACA,6BAA6B,KAAK;AAClC,SAAS;AACT;AACA;AACA,mCAAmC,MAAM;AACzC,sBAAsB,KAAK;AAC3B,SAAS;AACT,KAAK;AACL;;;;;;;UCXA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACN8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,+CAAM;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,cAAc;AACjD,qCAAqC,qBAAqB;AAC1D,yCAAyC,oBAAoB;AAC7D,sCAAsC,iBAAiB;AACvD;AACA,qBAAqB;AACrB;AACA;AACA,2CAA2C,+CAAM;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://lab1/./src/Author.ts","webpack://lab1/./src/DataRetrievalStrategyFactory.ts","webpack://lab1/./src/HTMLListStrategy.ts","webpack://lab1/./src/HTMLTableStrategy.ts","webpack://lab1/./src/JSONStrategy.ts","webpack://lab1/./src/decorators/required.ts","webpack://lab1/webpack/bootstrap","webpack://lab1/webpack/runtime/define property getters","webpack://lab1/webpack/runtime/hasOwnProperty shorthand","webpack://lab1/webpack/runtime/make namespace object","webpack://lab1/./src/index.ts"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport DataRetrievalStrategyFactory from \"./DataRetrievalStrategyFactory\";\nimport { required } from \"./decorators/required\";\nexport default class Author {\n    getid() {\n        return this._id;\n    }\n    setid(value) {\n        this._id = value;\n    }\n    getfirstName() {\n        return this._firstName;\n    }\n    setfirstName(value) {\n        this._firstName = value;\n    }\n    getlastName() {\n        return this._lastName;\n    }\n    setlastName(value) {\n        this._lastName = value;\n    }\n    getemail() {\n        return this._email;\n    }\n    setemail(value) {\n        this._email = value;\n    }\n    constructor(id, firstName, lastName, email) {\n        this._id = id;\n        this._firstName = firstName;\n        this._lastName = lastName;\n        this._email = email;\n    }\n    static retrieveData(authors, strategyType) {\n        const strategyFactory = new DataRetrievalStrategyFactory();\n        const strategy = strategyFactory.createStrategy(strategyType);\n        return strategy.retrieveData(authors);\n    }\n}\n__decorate([\n    required\n], Author.prototype, \"_firstName\", void 0);\n","import { HTMLListStrategy } from \"./HTMLListStrategy\";\nimport { HTMLTableStrategy } from \"./HTMLTableStrategy\";\nimport { JSONStrategy } from \"./JSONStrategy\";\nexport default class DataRetrievalStrategyFactory {\n    createStrategy(type) {\n        switch (type) {\n            case \"table\":\n                return new HTMLTableStrategy();\n            case \"list\":\n                return new HTMLListStrategy();\n            case \"json\":\n                return new JSONStrategy();\n            default:\n                throw new Error(\"Unknown strategy type\");\n        }\n    }\n}\n","export class HTMLListStrategy {\n    retrieveData(authors) {\n        let list = \"<ul>\";\n        authors.forEach((author) => {\n            list += `<li>${author.getemail()} ${author.getlastName()} ${author.getid()} ${author.getfirstName()}</li>`;\n        });\n        list += \"</ul>\";\n        return list;\n    }\n}\n","export class HTMLTableStrategy {\n    retrieveData(authors) {\n        let table = \"<table><tr><th>ID</th><th>First Name</th><th>Last Name</th><th>Email</th></tr>\";\n        authors.forEach((author) => {\n            table += `<tr><td>${author.getid()}</td><td>${author.getfirstName()}</td><td>${author.getlastName()}</td><td>${author.getemail()}</td></tr>`;\n        });\n        table += \"</table>\";\n        return table;\n    }\n}\n","export class JSONStrategy {\n    retrieveData(authors) {\n        const jsonData = authors.map((author) => {\n            return {\n                id: author.getid(),\n                firstName: author.getfirstName(),\n                lastName: author.getlastName(),\n                email: author.getemail(),\n            };\n        });\n        return JSON.stringify(jsonData);\n    }\n}\n","export function required(target, name) {\n    Object.defineProperty(target, name, {\n        get: function () {\n            return this[`__${name}`];\n        },\n        set: function (value) {\n            if (value === null || value === undefined || value.length === 0)\n                throw new Error(`${name} nie może być puste`);\n            this[`__${name}`] = value;\n        },\n    });\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Author from \"./Author\";\nclass CounterApp {\n    constructor() {\n        this.count = 0;\n        this.counterInput = document.getElementById(\"counterInput\");\n        this.incrementButton = document.getElementById(\"incrementButton\");\n        this.decrementButton = document.getElementById(\"decrementButton\");\n        this.addEventListeners();\n        this.updateCounterDisplay();\n    }\n    addEventListeners() {\n        this.incrementButton.addEventListener(\"click\", () => this.incrementCounter());\n        this.decrementButton.addEventListener(\"click\", () => this.decrementCounter());\n    }\n    incrementCounter() {\n        this.count++;\n        this.updateCounterDisplay();\n    }\n    decrementCounter() {\n        if (this.count > 0) {\n            this.count--;\n            this.updateCounterDisplay();\n        }\n    }\n    updateCounterDisplay() {\n        this.counterInput.value = this.count.toString();\n    }\n}\nconst app = new CounterApp();\nclass Aplikacja {\n    async pobierzDane() {\n        try {\n            const response = await fetch(\"data.json\");\n            const dane = await response.json();\n            console.log(dane);\n            if (Array.isArray(dane)) {\n                const autorzy = dane.map((d) => new Author(d.id, d.firstname, d.lastname, d.email));\n                return autorzy;\n            }\n            else {\n                throw new Error(\"Nieprawidłowy format danych JSON\");\n            }\n        }\n        catch (error) {\n            console.error(\"Wystąpił błąd podczas pobierania danych:\", error);\n            return [];\n        }\n    }\n    async uruchom() {\n        const autorzy = await this.pobierzDane();\n        if (autorzy.length > 0) {\n            const authorList = document.getElementById(\"authorList\");\n            if (authorList != null) {\n                if (autorzy.length === 0) {\n                    authorList.innerHTML = \"Brak dostępnych danych autorów.\";\n                }\n                else {\n                    const authorHTML = autorzy.map((autor) => {\n                        return `<div>\r\n                          <p>ID: ${autor.getid()}</p>\r\n                          <p>Imię: ${autor.getfirstName()}</p>\r\n                          <p>Nazwisko: ${autor.getlastName()}</p>\r\n                          <p>Email: ${autor.getemail()}</p>\r\n                        </div>`;\n                    });\n                    authorList.innerHTML = authorHTML.join(\"\");\n                    if (authorList != null) {\n                        const authorHTML = Author.retrieveData(autorzy, \"list\");\n                        authorList.innerHTML = authorHTML;\n                    }\n                }\n            }\n        }\n        else {\n            console.log(\"Brak dostępnych danych autorów.\");\n        }\n    }\n}\nconst aplikacja = new Aplikacja();\naplikacja.uruchom();\n"],"names":[],"sourceRoot":""}